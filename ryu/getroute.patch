From cc40daf41eeef04114a0ba876a7a8187fd1c4df6 Mon Sep 17 00:00:00 2001
From: Pier Luigi Ventre <pierventre@hotmail.com>
Date: Thu, 16 Oct 2014 11:27:58 +0200
Subject: [PATCH] Update rest topology with getRoute service and disable
 install lldp rules

---
 ryu/app/rest_topology.py | 64 ++++++++++++++++++++++++++++++++++++++++++++++++
 ryu/topology/switches.py |  2 +-
 2 files changed, 65 insertions(+), 1 deletion(-)

diff --git a/ryu/app/rest_topology.py b/ryu/app/rest_topology.py
index 5eed243..6711e49 100644
--- a/ryu/app/rest_topology.py
+++ b/ryu/app/rest_topology.py
@@ -15,10 +15,14 @@
 
 import json
 from webob import Response
+import networkx as nx
+from random import randrange
+
 
 from ryu.app.wsgi import ControllerBase, WSGIApplication, route
 from ryu.base import app_manager
 from ryu.lib import dpid as dpid_lib
+from ryu.lib import port_no as port_no_lib
 from ryu.topology.api import get_switch, get_link
 
 # REST API for switch configuration
@@ -35,6 +39,10 @@ from ryu.topology.api import get_switch, get_link
 # get the links of a switch
 # GET /v1.0/topology/links/<dpid>
 #
+# XXX
+# get the route that interconnects input switches
+# GET /v1.0/topology/route/<srcdpid>/<srcport>/<dstdpid>/<dstport>
+#
 # where
 # <dpid>: datapath id in 16 hex
 
@@ -76,6 +84,13 @@ class TopologyController(ControllerBase):
     def get_links(self, req, **kwargs):
         return self._links(req, **kwargs)
 
+    @route('topology', '/v1.0/topology/route/{srcdpid}/{srcport}/{dstdpid}/{dstport}',
+           methods=['GET'], requirements={'srcdpid': dpid_lib.DPID_PATTERN,
+          'srcport': port_no_lib.PORT_NO_PATTERN, 'dstdpid': dpid_lib.DPID_PATTERN,
+          'dstport': port_no_lib.PORT_NO_PATTERN})
+    def get_route(self, req, **kwargs):
+        return self._route(req, **kwargs)
+
     def _switches(self, req, **kwargs):
         dpid = None
         if 'dpid' in kwargs:
@@ -91,3 +106,52 @@ class TopologyController(ControllerBase):
         links = get_link(self.topology_api_app, dpid)
         body = json.dumps([link.to_dict() for link in links])
         return Response(content_type='application/json', body=body)
+
+    def _route(self, req, **kwargs):
+        srcdpid=dpid_lib.str_to_dpid(kwargs['srcdpid'])
+        srcport=port_no_lib.str_to_port_no(kwargs['srcport'])
+        dstdpid=dpid_lib.str_to_dpid(kwargs['dstdpid'])
+        dstport=port_no_lib.str_to_port_no(kwargs['dstport'])
+        links = get_link(self.topology_api_app, None)
+        
+        topology = nx.MultiDiGraph()
+        for link in links:
+            print link
+            topology.add_edge(link.src.dpid, link.dst.dpid, src_port=link.src.port_no, dst_port=link.dst.port_no)
+        
+        try:    
+            shortest_path = nx.shortest_path(topology, srcdpid, dstdpid)
+        except (nx.NetworkXError, nx.NetworkXNoPath):
+            body = json.dumps([])
+            print "Error"
+            return Response(content_type='application/json', body=body)
+            
+        ingressPort = NodePortTuple(srcdpid, srcport)
+        egressPort = NodePortTuple(dstdpid, dstport)
+        route = []
+        route.append(ingressPort)
+        
+        for i in range(0, len(shortest_path)-1):
+            link = topology[shortest_path[i]][shortest_path[i+1]]
+            index = randrange(len(link))
+            dstPort = NodePortTuple(shortest_path[i], link[index]['src_port'])
+            srcPort = NodePortTuple(shortest_path[i+1], link[index]['dst_port'])
+            route.append(dstPort)
+            route.append(srcPort)
+            
+        route.append(egressPort)
+        body = json.dumps([hop.to_dict() for hop in route])
+        return Response(content_type='application/json', body=body)
+        
+        
+class NodePortTuple(object):
+    
+    def __init__(self, dpid, port_no):
+        self.dpid = dpid_lib.dpid_to_str(dpid)
+        self.port_no = port_no_lib.port_no_to_str(port_no)
+        
+    def to_dict(self):
+        return {'switch': self.dpid, 'port':self.port_no}
+        
+    def __str__(self):
+        return 'NodePortTuple<switch=%s, port=%s>' % (self.dpid, self.port_no)
diff --git a/ryu/topology/switches.py b/ryu/topology/switches.py
index 4c66f0e..9be5885 100644
--- a/ryu/topology/switches.py
+++ b/ryu/topology/switches.py
@@ -46,7 +46,7 @@ CONF = cfg.CONF
 CONF.register_cli_opts([
     cfg.BoolOpt('observe-links', default=False,
                 help='observe link discovery events.'),
-    cfg.BoolOpt('install-lldp-flow', default=True,
+    cfg.BoolOpt('install-lldp-flow', default=False,
                 help='link discovery: explicitly install flow entry '
                      'to send lldp packet to controller'),
     cfg.BoolOpt('explicit-drop', default=True,
-- 
1.8.1.2

